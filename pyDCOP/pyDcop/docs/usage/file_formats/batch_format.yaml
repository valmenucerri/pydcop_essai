"""
File format for `pydcop batch` command

The batch command is used to specify a set of pydcop command
that will be run.

The two base elements in these files are 'Sets' and 'Batches':

* Sets defines the input files and number of time a command must be run.
  for example, if a `set` uses `iteration: 5` it will be run 5 times
  for each of the commands defines by each of the `batch` in the `batches` section.

* Batches defines the command that will be run for each set

Stop at any command error
  full output un cmd_error.log (in the directory in which the command is run, see current_dir)

TODO: arret et reprise en cours de batch
  progress file : lists all commands and execution times
  rename as done_<...> when the full batch as run

TODO: for each element, mandatory or optional

"""

sets:
  """
  The element `sets` is simply a list of named 'set' element (i.e. a dictionary).
  Each element in set must have a unique name ('set1', 'set2' or anything else more meaningful)
  and is a dictionary that can contain the following keys:
  * iterations
  * path
  * file_re
  * extras_files
  """

  set1:
    # 'path' can be a directory or a glob expression that will be is used to find the input files
    # for the command.

    # You can use '~' in this path, it will be expanded to the user's home directory.
    # see set3 for an example with a directory
    path: /path/set1/*.yaml
    # 'iterations' (optional) defines the number of time the command will be executed for each file
    # that match the path glob expression or regexp
    iterations: 3

    # If a set contains an entry "env" (which must be a dictionnary), the content of
    # this dictionnary will be added to the set of key that can be used for expansion
    # in batches definitions.
    env:
      key: value

  set2:
    # For command that do not have an input file, like for example generate, you
    # can simply give a number if iteration, with no path:
    iterations: 5

  set3:
    # No 'iterations'
    # Here path is simply a directory
    path: /path/set3/

    # But it can also be a regexp, in which case we will consider all file in
    # directory that match that regexp. Named group are used to capture matched subgroup
    # and re-use them later
    path_re: /path/a_dir_(?P<dir_num>.+)/


    # With file_re, you can use a regular expression instead of a glob.
    # Files in <path> matching this regular expression will e used as input parameters
    # for the batches.
    # The python regular expression syntax is used. You can define match subgroup.
    # You MUST use named groups to access them from extras_path entries.
    # Named group can also be used in batch definition
    file_re: coloring_random_(?P<num>.+)_dcop.yaml

    # Extra_files (optional) allows to find 'companion files' that will be passed to
    # the commands after a file matched with file_re.
    # It is a list of file names, which may includes match subgroup from the regexp
    # in 'file_re'.
    # These files must be in the same directory as the file matched by file_re
    extras_files:
      - coloring_random_{num}_dcop_agts.yaml



"""
When using the  'parallel: <num>', <num> commands will be run in parallel.
This can make the batch faster overall but may result in individual commands running slower,
use with caution !
"""
parallel: 2

global_options:
  # These items are used to generate the options passed at the global level and can be
  # overwritten at the batch level.
  timeout: 10
  log: log.conf

batches:

  conf1:
    command: solve

    # where the command will be run
    # created if needed
    current_dir: ~/tmp/{algo}

    command_options:
      # These items are used to build the options passed at the command level.
      #  pydcop <global_options> command <command_options>
      # The name of the parameter must match the name of the option expected by the command.
      # For example, "algo: dsa" will be transformed into "--algo dsa".
      # The values can be string, numbers , list or dictionary
      #  * strings: string can use variable expansion: for example "out_{algo}.yaml" will
      #    be expanded to "out_dsa.yaml" if there is a parameter named 'algo'
      #  * lists : when using a list of values, a command is be run for every possible
      #    combination of values for all parameters (cartesian product). strings in list
      #    are also expanded
      #   * dict: when using a dictionary, parameters are passed to the command with a
      #     specific syntax :for each (key, value) pair in the dict named "mydict",
      #     an optionis generated like this: "--mydict key:value".
      #     This is used mainly for the a "algo_parameter" options of the solve command:
      #       "--algo_parameter variant:A"


      # Names for variables expansion
      #  * set: the name of the set
      #  * file_path: the path to the file (from the set) currently processed
      #  * dir_path: the path to the directory of the file currently processed
      #  * file_basename: the basename of the file currently processed
      #  * file_name: the name of the file currently processed, without the extension
      #  * iteration : the current value of counter for iterations
      #  * batch: name of batch currently processed

      algo: dsa
      algo_params:
        stop_cyle: 100
        variant: [A, B, C]
        probability: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]
      run_metrics: {set}/{problem}/variant_{algo_params[variant]}/prob_{algo_params[probability]}/run.csv

    global_options:
      # These items are used to generate the options passed at the global level and will
      # overwrite global options set an upper level.
      #  pydcop <global_options> command <command_options>
      timeout: 10
      log: log.conf
      output: {pb_file}


    # When you set several values for algorithm's parameters, you generally want to
    # make sur that the output files and paths include these value to avoid
    # overwriting output for different solve.
    # For example here, 'dcop2.yaml'  from "set1" would end up in a directory named:
    #     /tmp/out/set1/dcop2/dsa/variant_A/prob_0.2/

    out_path: {problems_set}/{problem}/{algo}/variant_{variant}/prob_{probability}/

  conf_generate:
    command: generate ising
    current_dir: ~/tmp/ising/row{row_count}_col{col_count}/

    command_options:
      row_count: [3, 4, 5]
      col_count: [3, 4, 5]

    global_options:
      output: /out/ising/ising_{row_count}_{col_count}.yaml
